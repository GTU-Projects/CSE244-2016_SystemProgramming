++index;
if(buf == '\n'){
  ++row;
  index=0;
  equalCh=0;
}else if(buf == word[0]){
  column=index;
  ++equalCh;
  for(i=1;i<strlen(word);++i){ /* tum harfler bulunursa */
    read(fdFileToRead,&buf,sizeof(char));
    ++index;
    if(buf == word[i]){
      ++equalCh;
    }else if(buf == '\n'){ /* araya new line girmesin*/
      equalCh=0;
      ++row;
      index=0;
      break;
    }else{
      break;
    }
  }
  if(equalCh == strlen(word)){ /* kelime bulundu ve dosyaya yazildi*/
    #ifdef DEBUG
    printf("Index of Firt equal Characters : %d\n",column-1);
    printf("Index of end of equality : %d\n",index-1);
    #endif
    ++foundNum;
    lseek(fdFileToRead,-equalCh+1,SEEK_CUR);
    index = index -equalCh+1;
    #ifdef DEBUG
    printf("Index after lseek : %d\n",index);
    #endif
    sprintf(wordCoordinats,"%d. Row: %d Column: %d\n",foundNum,row,column);
    write(fdTempFile,wordCoordinats,strlen(wordCoordinats));
    equalCh=0;
  }
}



int searchDir(const char *dirPath,const char *word){

  DIR* pDir=NULL; /* klasor */
  struct dirent *pDirent=NULL; /* klasor icerigi */
  pid_t pidChild;
  pid_t pidTerminated; /* parente geri donen child */
  char cwd[PATH_MAX]; /* mevcut dosya yolu */
  char *pCh_TerminatedProcess=NULL; /* olen processin adi */
  char *pCh_logFileName=NULL;
  char direntName[PATH_MAX]; /* klasor icindeki veri adi */
  int howManyChildRead=0;
  int totalFound=0; /* toplam eslesen kelime */

  if(NULL == (pDir = opendir(dirPath))){
    fprintf(stderr, "Failed open %s -> Errno : %s",dirPath,strerror(errno));
    return FAIL;
  }

  if(mkfifo(getStringOfNumber(getpid()),FIFO_PERMS) == FAIL){
    perror("Failed to mkfifo");
    exit(1);
  }

  getcwd(cwd,PATH_MAX);
  chdir(dirPath); /* klasorun icine gir */
  getcwd(cwd,PATH_MAX);

  /* tum klasor icine bakar
     eger iceride txt ve klasorler varsa fork edip bekler */
  while(NULL != (pDirent = readdir(pDir))){
   if(strcmp( pDirent->d_name,".")!=0 && strcmp(pDirent->d_name,"..")!=0){
     if(TRUE == isRegularFile(pDirent->d_name) ||
          TRUE == isDirectory(pDirent->d_name)){
       pidChild = fork();
       if(pidChild <= 0){
         strcpy(direntName,pDirent->d_name);
         closedir(pDir); /*Ust tarafta acik olan klasorler kapandi*/
        break;
       }
    }
   }
 }

/* Childlerden gelen exit bilgisine gore log dosyalarini toplar her parent
  loglar toplanip ortak log yapildiktan sonra silinirler
*/
 if(pidChild >0){
   while(FAIL != (pidTerminated = wait(&howManyChildRead))){
     totalFound+=WEXITSTATUS(howManyChildRead); /* child kac gelime buldu */
     pCh_logFileName=getStringOfNumber(getpid());
     pCh_TerminatedProcess = getStringOfNumber(pidTerminated);
     addLog(dirPath,pCh_TerminatedProcess,pCh_logFileName);
     unlink(pCh_TerminatedProcess);
     free(pCh_TerminatedProcess);
     free(pCh_logFileName);
     pCh_logFileName=NULL; /* dangling pointerler silindi */
     pCh_TerminatedProcess=NULL;
     }
 }

/* Eger child txt gorduyse okur , klasor gorduyse revursive olarak devam eder*/
 if(pidChild ==0){
   if(TRUE == isRegularFile(direntName)){
     totalFound += findOccurencesInFile(direntName,word);
   }else if(TRUE == isDirectory(direntName)){
     totalFound += searchDir(direntName,word);
    }
    pDir=NULL;
    pDirent=NULL;
    exit(totalFound); /* Toplam bulunan sayi parente yollandi */
 }

  chdir("..");
  closedir(pDir);
  pDir=NULL;
  pDirent=NULL;
  return totalFound;
}
